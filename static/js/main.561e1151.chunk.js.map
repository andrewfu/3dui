{"version":3,"sources":["components/with-sp-auth/pnp.js","components/with-sp-auth/with-sp-auth.jsx","config/config.js","components/with-sp-auth/index.js","components/startup/startup.jsx","actions/site.js","utl/common.js","utl/actions.js","components/startup/index.js","components/startup/startup-container.js","reducers/index.js","reducers/site.js","components/app/store.js","components/app/index.js","components/app/app.jsx","index.js"],"names":["PnPFetchClient","authContext","url","options","isUrlAbsolute","Error","this","getToken","getResource","token","resource","request","indexOf","scopes","acquireTokenSilent","response","accessToken","requiresInteraction","errorCode","acquireTokenRedirect","length","parser","document","createElement","href","protocol","hostname","BearerTokenFetchClient","msalInstance","UserAgentApplication","auth","authority","clientId","WithSpAuth","WrappedComponent","props","state","authenticated","renewIframe","hasError","errorMessage","handleRedirectCallback","setState","InitPnP","authErr","accountState","console","log","isCallback","window","location","hash","getAccount","loginRedirect","sp","setup","fetchClientFactory","baseUrl","React","siteTitle","GetSite","sitefetching","sitefetched","type","ServiceAction","dispatch","getState","a","serviceActionResult","payload","Fetch","web","get","site","Title","Startup","connect","title","bindActionCreators","combineReducers","action","createStore","reducer","applyMiddleware","thunk","createLogger","App","store","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.561e1151.chunk.js","sourcesContent":["import { BearerTokenFetchClient, isUrlAbsolute } from \"@pnp/common\";\r\n\r\nexport class PnPFetchClient extends BearerTokenFetchClient {\r\n  constructor(authContext) {\r\n    super(null);\r\n    this.authContext = authContext;\r\n  }\r\n\r\n  async fetch(url, options = {}) {\r\n    if (!isUrlAbsolute(url)) {\r\n      throw new Error(\"You must supply absolute urls to PnPFetchClient.fetch.\");\r\n    }\r\n\r\n    const token = await this.getToken(this.getResource(url));\r\n    this.token = token;\r\n    return super.fetch(url, options);\r\n  }\r\n\r\n  async getToken(resource) {\r\n    const request = {};\r\n\r\n    if (resource.indexOf(\"sharepoint\") !== -1) {\r\n      request.scopes = [`${resource}/AllSites.Read`];\r\n    } else if (resource.indexOf(\"graph\") !== -1) {\r\n      request.scopes = [\r\n        `${resource}/Group.Read.All`,\r\n        `${resource}/User.Read`,\r\n        `${resource}/profile`,\r\n      ];\r\n    }\r\n\r\n    try {\r\n      const response = await this.authContext.acquireTokenSilent(request);\r\n\r\n      return response.accessToken;\r\n    } catch (error) {\r\n      if (this.requiresInteraction(error.errorCode)) {\r\n        this.authContext.acquireTokenRedirect(request);\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  requiresInteraction(errorCode) {\r\n    if (!errorCode || !errorCode.length) {\r\n      return false;\r\n    }\r\n    return (\r\n      errorCode === \"consent_required\" ||\r\n      errorCode === \"interaction_required\" ||\r\n      errorCode === \"login_required\"\r\n    );\r\n  }\r\n\r\n  getResource(url) {\r\n    const parser = document.createElement(\"a\");\r\n    parser.href = url;\r\n    return `${parser.protocol}//${parser.hostname}`;\r\n  }\r\n}\r\n","import { sp } from \"@pnp/sp\";\r\nimport * as React from \"react\";\r\n\r\nimport config, { siteUrl } from \"../../config/config\";\r\nimport { PnPFetchClient } from \"./pnp\";\r\nimport { UserAgentApplication } from \"msal\";\r\n\r\nexport const msalInstance = new UserAgentApplication({ auth: config });\r\n\r\nexport default function withAuth(WrappedComponent) {\r\n  return class Auth extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        authenticated: false,\r\n        renewIframe: false,\r\n        hasError: false,\r\n        errorMessage: null,\r\n      };\r\n    }\r\n\r\n    componentWillMount() {\r\n      msalInstance.handleRedirectCallback(\r\n        () => {\r\n          this.setState({\r\n            authenticated: true,\r\n          });\r\n          this.InitPnP();\r\n        },\r\n        (authErr, accountState) => {\r\n          console.log(authErr);\r\n          this.setState({\r\n            hasError: true,\r\n            errorMessage: authErr.errorMessage,\r\n          });\r\n        }\r\n      );\r\n\r\n      if (msalInstance.isCallback(window.location.hash)) {\r\n        this.setState({\r\n          renewIframe: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!msalInstance.getAccount()) {\r\n        msalInstance.loginRedirect({});\r\n        return;\r\n      } else {\r\n        this.setState({ authenticated: true });\r\n        this.InitPnP();\r\n      }\r\n    }\r\n\r\n    render() {\r\n      if (this.state.renewIframe) {\r\n        return <div>hidden renew iframe - not visible</div>;\r\n      }\r\n\r\n      if (this.state.authenticated) {\r\n        return <WrappedComponent {...this.props} />;\r\n      }\r\n\r\n      if (this.state.hasError) {\r\n        return <div>{this.state.errorMessage}</div>;\r\n      }\r\n\r\n      return <div>Login in progress...</div>;\r\n    }\r\n\r\n    InitPnP() {\r\n      console.log(`init pnp`);\r\n      const fetchClientFactory = () => new PnPFetchClient(msalInstance);\r\n      sp.setup({ sp: { fetchClientFactory, baseUrl: siteUrl } });\r\n    }\r\n  };\r\n}\r\n","export default {\r\n  authority: \"https://login.microsoftonline.com/8f2729c9-155b-42ae-99a6-6c8dd2e286d5\",\r\n  clientId: \"993dcb6f-07c4-41dc-b789-0185c110408e\",\r\n};\r\n\r\nexport const siteUrl = \"https://openpoint.sharepoint.com\";\r\n","import WithSpAuth from \"./with-sp-auth\";\r\nexport default WithSpAuth;","import React from \"react\";\r\nimport WithSpAuth from \"../with-sp-auth\";\r\n\r\nimport { msalInstance } from \"../with-sp-auth/with-sp-auth\";\r\n\r\nexport default WithSpAuth(({ siteTitle, GetSite, sitefetching, sitefetched }) => {\r\n  if (!sitefetching && !sitefetched) GetSite();\r\n  const user = \"\"; //msalInstance.getAccount().name;\r\n  if (sitefetched) return <div>{siteTitle}</div>;\r\n  return <div>Loading...</div>;\r\n});\r\n","import * as Actions from \"../utl/actions\";\r\nimport { Fetch } from \"../utl/common\";\r\nimport { sp } from \"@pnp/sp\";\r\nimport \"@pnp/sp/webs\";\r\n\r\nexport const GetSite = () =>\r\n  Fetch({\r\n    type: Actions.FETCH_SITE,\r\n    ServiceAction: async () => {\r\n      const site = await sp.web.get();\r\n      console.log(site.Title);\r\n      return site;\r\n    },\r\n  });\r\n","export const Fetch = ({ type, ServiceAction }) => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type });\r\n    try {\r\n      const serviceActionResult = await ServiceAction(getState);\r\n      dispatch({\r\n        type: `${type}_SUCCESS`,\r\n        payload: serviceActionResult,\r\n      });\r\n      return serviceActionResult;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: `${type}_ERROR`,\r\n        payload: error,\r\n      });\r\n    }\r\n  };\r\n};\r\n","export const FETCH_SITE = \"FETCH_SITE\";\r\n","import Startup from \"./startup-container\";\r\nexport default Startup;\r\n","import { connect } from \"react-redux\";\r\nimport Startup from \"./startup\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { GetSite } from \"../../actions/site\";\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ GetSite }, dispatch);\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    siteTitle: state.site.title,\r\n    sitefetching: state.site.sitefetching,\r\n    sitefetched: state.site.sitefetched,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Startup);\r\n","import { combineReducers } from \"redux\";\r\nimport site from \"./site\";\r\nexport default combineReducers({ site });\r\n","import * as Actions from \"../utl/actions\";\r\n\r\nexport default (\r\n  state = {\r\n    title: \"\",\r\n    sitefetching: false,\r\n    sitefetched: false,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case Actions.FETCH_SITE:\r\n      return {\r\n        ...state,\r\n        sitefetching: true,\r\n        sitefetched: false,\r\n      };\r\n    case `${Actions.FETCH_SITE}_SUCCESS`:\r\n      return {\r\n        ...state,\r\n        sitefetching: false,\r\n        sitefetched: true,\r\n        title: action.payload.Title,\r\n      };\r\n  }\r\n  return state;\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"../../reducers\";\r\n\r\nexport default createStore(reducer, applyMiddleware(thunk, createLogger()));\r\n","import App from \"./app\";\r\nexport default App;\r\n","import React from \"react\";\r\nimport Startup from \"../startup\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nexport default () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Startup />\r\n    </Provider>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}